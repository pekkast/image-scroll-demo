{"version":3,"sources":["store/actions.ts","store/reducer.ts","store/store.ts","components/Image.tsx","components/ImageCard.tsx","components/ImageList.tsx","hooks/useWindowSize.ts","views/ImageListView.tsx","views/ImageView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["photosLoaded","photos","type","singleLoaded","photo","serverUrl","initialState","loading","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","action","concat","directPhoto","applyMiddleware","thunk","Image","title","src","width","height","className","React","useState","setLoading","Skeleton","variant","animation","style","display","alt","onLoad","ImageCard","actions","Card","CardActionArea","url","CardContent","Typography","gutterBottom","component","CardActions","useStyles","makeStyles","tile","cursor","ImageList","columnCount","spacing","tileSize","isDialogOpen","setIsDialogOpen","selectedPhoto","setSelectedPhoto","handleClose","classes","GridList","cellHeight","cols","map","p","GridListTile","key","id","onClick","thumbnailUrl","GridListTileBar","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogActions","Button","color","getSize","innerWidth","innerHeight","StyledProgress","withStyles","root","margin","LinearProgress","ImageListView","dispatch","useDispatch","useSelector","windowSize","setWindowSize","handleResize","useEffect","addEventListener","removeEventListener","useWindowSize","windowHeight","windowWidth","Math","floor","rowCount","fetchSize","max","hasMore","length","pageStart","loadMore","getState","a","fetch","response","json","fetchPhotos","loader","Alert","severity","ImageView","photoId","useParams","parseInt","find","getMatchedOrNull","fetchPhoto","to","App","CssBaseline","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7d45c057.chunk.js","sourcesContent":["import { IPhotoDefinition } from './models';\nimport { Dispatch } from 'redux';\nimport { IAppState } from './reducer';\n\nexport interface IAction {\n    type: string,\n    [key: string]: any,\n}\n\nexport const PHOTOS_LOADED = 'app.images.PHOTOS_LOADED';\nexport const PHOTOS_LOAD_MORE = 'app.images.PHOTOS_LOAD_MORE';\nexport const SINGLE_LOADED = 'app.images.SINGLE_LOADED';\n\nexport const photosLoaded = (photos: Array<IPhotoDefinition>): IAction => ({\n    type: PHOTOS_LOADED,\n    photos,\n})\n\nexport const photosLoadMore = (): IAction => ({\n    type: PHOTOS_LOAD_MORE,\n})\n\nexport const singleLoaded = (photo: IPhotoDefinition): IAction => ({\n    type: SINGLE_LOADED,\n    photo,\n})\n\nconst serverUrl = 'https://jsonplaceholder.typicode.com';\n\nexport const fetchPhotos = (fetchSize: number) => async (dispatch: Dispatch, getState: () => IAppState) => {\n    const { photos } = getState();\n    dispatch(photosLoadMore());\n    const response = await fetch(`${serverUrl}/photos?_start=${photos.length}&_limit=${fetchSize}`);\n    dispatch(photosLoaded(await response.json()));\n}\n\nexport const fetchPhoto = (id: number) => async (dispatch: Dispatch) => {\n    dispatch(photosLoadMore());\n    const response = await fetch(`${serverUrl}/photos/${id}`);\n    dispatch(singleLoaded(await response.json()));\n}\n","import { IPhotoDefinition } from './models';\nimport { PHOTOS_LOADED, IAction, PHOTOS_LOAD_MORE, SINGLE_LOADED } from './actions';\n\nexport interface IAppState {\n    photos: Array<IPhotoDefinition>,\n    loading: boolean,\n    directPhoto?: IPhotoDefinition, // Place to store a photo that was downloaded to support direct linking\n}\n\nconst initialState: IAppState = { photos: [], loading: false };\n\nexport default function reducer(state: IAppState = initialState, action: IAction) {\n  switch (action.type) {\n    case PHOTOS_LOADED:\n      return { ...state, photos: state.photos.concat(action.photos), loading: false };\n    case PHOTOS_LOAD_MORE:\n      return { ...state, loading: true };\n    case SINGLE_LOADED:\n      return { ...state, directPhoto: action.photo };\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer';\n\n// Allow browser devtools\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport { Skeleton } from '@material-ui/lab';\n\nexport type ImageProps = {\n    title: string,\n    src: string,\n    width?: number | string,\n    height?: number | string,\n    className?: string,\n};\n\nconst Image: React.FC<ImageProps> = ({title, src, width, height, className}) => {\n    const [loading, setLoading] = React.useState<boolean>(true);\n    const setLoaded = () => setLoading(false)\n\n    return (\n        <>\n            {loading && <Skeleton className={className} variant=\"rect\" animation=\"wave\" width={width} height={height} />}\n            <img \n                className={className}\n                style={{ display: loading ? 'none' : 'inline-block' }} \n                alt={title} \n                src={src} \n                width={width} \n                height={height} \n                onLoad={setLoaded} \n            />\n        </>\n    );\n}\n\nexport default Image;","import React from 'react';\nimport { IPhotoDefinition } from '../store/models';\nimport { Card, CardActionArea, CardContent, Typography, CardActions } from '@material-ui/core';\nimport Image from './Image';\n\nexport type ImageCardProps = {\n    photo: IPhotoDefinition,\n    actions?: React.ReactNodeArray,\n};\n\nconst ImageCard: React.FC<ImageCardProps> = ({ photo, actions }) => (\n    <Card>\n        <CardActionArea>\n            <Image\n                className=\"MuiCardMedia-img MuiCardMedia-media\"\n                title={photo.title}\n                height={600}\n                width=\"100%\"\n                src={photo.url}\n            />\n            <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    {photo.title}\n                </Typography>\n            </CardContent>\n        </CardActionArea>\n        {actions && (\n            <CardActions>\n                {actions}\n            </CardActions>\n        )}\n    </Card>\n);\n\nexport default ImageCard;","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, GridList, GridListTile, GridListTileBar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { IPhotoDefinition } from '../store/models';\nimport Image from './Image';\nimport ImageCard from './ImageCard';\n\nconst useStyles = makeStyles({\n    tile: {\n        cursor: 'pointer',\n    }\n});\n\nexport type ImageListProps = {\n    photos: Array<IPhotoDefinition>,\n    columnCount: number,\n    spacing: number,\n    tileSize: number,\n};\n\nconst ImageList: React.FC<ImageListProps> = ({ photos, columnCount, spacing, tileSize }) => {\n    const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n    const [selectedPhoto, setSelectedPhoto] = React.useState<IPhotoDefinition|null>(null);\n    const handleClose = () => setIsDialogOpen(false);\n    const handleOpen = (photo: IPhotoDefinition) => {\n        setSelectedPhoto(photo);\n        setIsDialogOpen(true);\n    };\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <GridList cellHeight={tileSize} cols={columnCount} spacing={spacing}>\n                {photos.map((p) => (\n                    <GridListTile className={classes.tile} key={p.id} onClick={() => handleOpen(p)}>\n                        <Image title={p.title} src={p.thumbnailUrl} />\n                        <GridListTileBar title={p.title} />\n                    </GridListTile>\n                ))}\n            </GridList>\n            <Dialog open={isDialogOpen} onClose={handleClose} aria-labelledby=\"photo-details-title\">\n                <DialogTitle id=\"photo-details-title\">{selectedPhoto?.title}</DialogTitle>\n                <DialogContent>\n                    <ImageCard photo={selectedPhoto!} />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Sulje\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\nexport default ImageList;","// Borrowed from https://usehooks.com/useWindowSize/\nimport { useState, useEffect } from 'react';\n\ninterface IWindow {\n    innerWidth: number,\n    innerHeight: number,\n    addEventListener: (eventType: string, eventHandler: () => void) => void,\n    removeEventListener: (eventType: string, eventHandler: () => void) => void,\n}\n\ninterface IPlaneSize {\n    width: number,\n    height: number,\n}\n\nexport const getSize = (window: IWindow): IPlaneSize => ({\n    width: window.innerWidth,\n    height: window.innerHeight,\n});\n\nexport default function useWindowSize() {\n    const [windowSize, setWindowSize] = useState<IPlaneSize>(getSize(window));\n    const handleResize = () => setWindowSize(getSize(window));\n\n    useEffect(() => {\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []); \n\n    return windowSize;\n}","import { LinearProgress, withStyles } from '@material-ui/core';\nimport React from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ImageList from '../components/ImageList';\nimport useWindowSize from '../hooks/useWindowSize';\nimport { fetchPhotos } from '../store/actions';\nimport { IAppState } from '../store/reducer';\nimport { Alert } from '@material-ui/lab';\n\nconst StyledProgress = withStyles({\n    root: {\n        height: 20,\n        margin: 5,\n    },\n})(LinearProgress)\n\nconst ImageListView = () => {\n    const dispatch = useDispatch();\n    const photos = useSelector((state: IAppState) => state.photos);\n    const { height: windowHeight, width: windowWidth } = useWindowSize();\n\n    const tileSize = 150;\n    const columnCount = Math.floor(windowWidth / tileSize) || 1\n    const spacing = columnCount > 1 ? Math.floor((windowWidth % tileSize) / (columnCount - 1)) : 0\n    const rowCount = Math.floor(windowHeight / tileSize) || 1\n    const fetchSize = Math.max(20, columnCount * rowCount * 2);\n    const loadMore = () => dispatch(fetchPhotos(fetchSize));\n    const hasMore = photos.length < 5000;\n\n    return (\n        <>\n            <InfiniteScroll\n                pageStart={1}\n                loadMore={loadMore}\n                hasMore={hasMore}\n                loader={<StyledProgress key=\"loading\" />}\n            >\n                <ImageList\n                    key=\"images\"\n                    photos={photos}\n                    columnCount={columnCount}\n                    spacing={spacing}\n                    tileSize={tileSize}\n                />\n            </InfiniteScroll>\n            {!hasMore && <Alert severity=\"success\">Kaikki ladattu - hyvää työtä!</Alert>}\n        </>\n    )\n}\n\nexport default ImageListView;","import { Button } from '@material-ui/core';\nimport { Skeleton } from '@material-ui/lab';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useParams } from 'react-router-dom';\nimport ImageCard from '../components/ImageCard';\nimport { fetchPhoto } from '../store/actions';\nimport { IPhotoDefinition } from '../store/models';\nimport { IAppState } from '../store/reducer';\n\nconst getMatchedOrNull = (id: number, photo?: IPhotoDefinition) => photo && photo.id === id ? photo : null;\n\nconst ImageView = () => {\n    const { photoId } = useParams();\n    const id: number = photoId ? parseInt(photoId, 10) : 0;\n    const dispatch = useDispatch();\n    const photo = useSelector((state: IAppState) => id ? state.photos.find(p => p.id === id) || getMatchedOrNull(id, state.directPhoto) : null)\n\n\n    useEffect(() => {\n        if (!photo) {\n            dispatch(fetchPhoto(id))\n        }\n    }, [photoId, photo, dispatch, id])\n\n    return photo ? (\n        <ImageCard\n            photo={photo}\n            actions={[(\n                <Link\n                    key=\"router\"\n                    to=\"/\"\n                    component={Button}\n                    color=\"primary\"\n                >\n                    Listaukseen\n                </Link>\n            )]}\n        />\n    ) : <Skeleton variant=\"rect\" animation=\"wave\" width=\"100%\" height={600} />\n}\n\nexport default ImageView;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport store from './store';\nimport ImageListView from './views/ImageListView';\nimport ImageView from './views/ImageView';\nimport { CssBaseline } from '@material-ui/core';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <CssBaseline />\n      <BrowserRouter>\n        <div className=\"App\">\n          <Switch>\n            <Route path=\"/photos/:photoId\">\n              <ImageView />\n            </Route>\n            <Route path=\"/\">\n              <ImageListView />\n            </Route>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}